# .github/workflows/release.yml

name: Release CI

# This workflow runs on pushes to the main branch and on pull requests.
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # This allows you to run the workflow manually from the Actions tab on GitHub.
  workflow_dispatch:

jobs:
  # The "build" job compiles the code on all three major platforms.
  build:
    name: Build
    # "strategy.matrix" is the magic that runs the same steps on different OSes.
    strategy:
      matrix:
        # Define the platforms and target architectures.
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl # Statically linked Linux binary
            archive_name: code_flattener_rs-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin # Intel Mac
            archive_name: code_flattener_rs-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin # Apple Silicon Mac (M1/M2/M3)
            archive_name: code_flattener_rs-macos-aarch64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_name: code_flattener_rs-windows-x86_64.zip

    # Use the operating system from the matrix.
    runs-on: ${{ matrix.os }}

    steps:
      # 1. Get the code from your repository.
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install zip tool (for Windows)
        if: matrix.os == 'windows-latest' # This condition makes the step run only on Windows
        run: choco install zip

      # 2. Install the Rust toolchain.
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }} # Install the specific target for cross-compiling if needed

      # 3. Build the release binary.
      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      # 4. Prepare the files for the release archive.
      - name: Package files
        shell: bash
        run: |
          # The binary will be in target/<target>/release/
          SOURCE_DIR="target/${{ matrix.target }}/release"
          
          # Create a staging directory to put all files into.
          STAGING_DIR="staging"
          mkdir -p "$STAGING_DIR"

          # Determine binary name based on OS.
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "$SOURCE_DIR/code_flattener_rs.exe" "$STAGING_DIR/"
          else
            cp "$SOURCE_DIR/code_flattener_rs" "$STAGING_DIR/"
          fi
          
          # Copy other useful files into the archive.
          cp README.md "$STAGING_DIR/"
          
          # Create the final archive.
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cd "$STAGING_DIR" && zip -r ../${{ matrix.archive_name }} .
          else
            cd "$STAGING_DIR" && tar -czf ../${{ matrix.archive_name }} .
          fi

      # 5. Upload the archive as an "artifact". This allows the next job to download it.
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  # The "release" job takes the built files and creates a GitHub Release.
  release:
    name: Create Release
    # This job needs to wait for all the build jobs to finish successfully.
    needs: build
    runs-on: ubuntu-latest
    
    # IMPORTANT: This job only runs when you push a new tag (e.g., "v1.2.3").
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # 1. Download all the artifacts (the zip/tar.gz files) from the build jobs.
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      # 2. Use a popular action to create the release and upload the files.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # This uses the files from the download step.
          files: artifacts/*/*
          # This automatically generates release notes from your commits.
          generate_release_notes: true
